name: CI
on:
  push:
    branches: [ master ]
#   pull_request:
#     branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: Build the production artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Java environment
        uses: actions/setup-java@v1
        with:
          java-version: 12.x

      - name: Setup Flutter environment
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'

      - name: Decrypt google services 
        run: ./.github/scripts/decrypt-google-services.sh
        env:
          GOOGLE_SERVICES_SECRET: ${{ secrets.GOOGLE_SERVICES_SECRET }}

      - name: Decrypt signing keys 
        run: ./.github/scripts/decrypt-upload-key.sh
        env:
          UPLOAD_KEY_SECRET: ${{ secrets.UPLOAD_KEY_SECRET }}
      
      - name: Replace admob tokens
        uses: cschleiden/replace-tokens@v1
        with:
          files: '["android/app/src/prod/res/values/strings.xml", "lib/main_prod.dart", "lib/main_prod_adfree.dart"]'
        env:
          admobappid: ${{ secrets.AD_MOB_APP_ID }}
          admobbannerid: ${{ secrets.AD_MOB_BANNER_UNIT_ID }}

      - name: Get version numbers
        run: |
          sudo snap install yq
          YAML_VERSION=$(yq r pubspec.yaml version)
          IFS='+' read -r VERSION BUILD <<< "$YAML_VERSION"
          BUILD=$GITHUB_RUN_NUMBER
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> version.txt
          echo "BUILD=$BUILD" >> $GITHUB_ENV
          echo "BUILD=$BUILD" >> version.txt
          echo "version: $VERSION, build: $BUILD"

      - name: Fetch package dependencies
        run: flutter pub get

      - name: Build the bundle
        run: |
          flutter build appbundle --flavor prod -t lib/main_prod.dart --build-name=${VERSION} --build-number=${BUILD}
          mv ./build/app/outputs/bundle/prodRelease/app-prod-release.aab ./app-prod-release.aab
          mv ./build/app/outputs/mapping/prod/release/mapping.txt ./mapping.txt

      - name: Build adfree apk
        run: |
          flutter build apk --flavor prod -t lib/main_prod_adfree.dart --build-name=${VERSION} --build-number=${BUILD}
          mv build/app/outputs/flutter-apk/app-prod-release.apk "moonshot_${BUILD}(${VERSION}).apk"

      - name: Upload version file
        uses: actions/upload-artifact@v2
        with:
          name: version
          path: version.txt

      - name: Upload itch.io artifacts
        uses: actions/upload-artifact@v2
        with:
          name: universal-apk
          path: moonshot_${{ env.BUILD }}(${{ env.VERSION }}).apk

      - name: Upload Play Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: play-store-files
          path: |
            app-prod-release.aab
            mapping.txt

  publish_itch:
    name: Publish apk to itch.io
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download version file
        uses: actions/download-artifact@v2
        with:
          name: version

      - name: Load version number
        run: |
          source version.txt
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      - name: Download apk from build
        uses: actions/download-artifact@v2
        with:
          name: universal-apk

      - name: Publish to itch.io
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: android
          ITCH_GAME: moonshot
          ITCH_USER: fstof
          PACKAGE: "moonshot_${{ env.BUILD }}(${{ env.VERSION }}).apk"
          VERSION: "${{ env.BUILD }}(${{ env.VERSION }})"

  publish_googlePlay:
    name: Publish bundle to Google Play
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download version file
        uses: actions/download-artifact@v2
        with:
          name: version

      - name: Load version number
        run: |
          source version.txt
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD=$BUILD" >> $GITHUB_ENV

      - name: Download Play Store artifacts from build
        uses: actions/download-artifact@v2
        with:
          name: play-store-files
      
      - name: Publish to Google Play Console
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
          packageName: dev.stofberg.moonshot
          releaseName: "${{ env.BUILD }}(${{ env.VERSION }})"
          track: internal
          releaseFiles: app-prod-release.aab
          mappingFile: mapping.txt
